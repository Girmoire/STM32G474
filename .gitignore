### CLion+all template
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# IDE generated files
.idea/.name
.idea/**/debugServers/SEGGER_J_Link.xml

# Claude Code settings (entire directory)
.claude/

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project format
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

# VSCode settings - generally ignored
.vscode/

# Exception: nucleo-H755ZI-Q VSCode debug configuration
# CLion has limited support for STM32H7 dual-core debugging and lacks:
# - Proper multicore debugging workflows for asymmetric dual-core MCUs
# - Advanced OpenOCD integration for simultaneous CM7+CM4 debugging  
# - STM32CubeCLT toolchain integration for STM32H755 HSEM synchronization
# - FreeRTOS dual-core thread debugging across both cores
# VSCode with cortex-debug extension provides superior STM32H7 multicore support
!boards/nucleo-H755ZI-Q/.vscode/

# STM32 Generated Files (excluding Core directories which contain application code)
**/Drivers/
**/Middlewares/

# Build outputs and artifacts
build/
**/build/
*.elf
*.hex
*.bin
*.map
*.list
*.o
*.obj
*.a
*.lib

# CMake generated files and build directories
cmake-build-*/
**/cmake-build-*/
CMakeCache.txt
CMakeFiles/
cmake_install.cmake
Makefile
compile_commands.json
**/compile_commands.json

# CMake dependencies (FetchContent, ExternalProject)
_deps/
**/_deps/

# CMake temporary and cache files
**/CMakeScratch/
**/CMakeConfigureLog.yaml
**/cmake.check_cache
**/rules.ninja
**/build.ninja

# Test outputs
Testing/
**/Testing/

# STM32CubeMX generated intermediate files
**/*-stamp/
**/*-prefix/
**/*-subbuild/

# Debug session files
*.dwf3work

# Platform-specific temporary files
*.tmp
*.temp
**/tmp/

